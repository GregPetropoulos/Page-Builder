{"ast":null,"code":"import axios from 'axios';\nimport { routes } from './routes';\n\nconst createPage = async (name, thumbnail, html) => {\n  const page = {\n    name,\n    thumbnail,\n    html\n  };\n\n  try {\n    await axios.post(routes.createPage(), page, {\n      withCredentials: true\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst fetchPages = async id => {\n  const response = await axios.get(routes.fetchPages(id), {\n    withCredentials: true\n  });\n  return response.data;\n};\n\nconst viewPage = async id => {\n  console.log('ID', id);\n  const response = await axios.get(routes.viewPage(id), {\n    withCredentials: true\n  });\n  console.log('sss', response);\n  return response.data;\n};\n\nconst downloadPage = async id => {\n  console.log('downloadPage id', id);\n  return await axios.get(routes.download(id), {\n    withCredentials: true\n  });\n};\n\nconst deletePage = async (userId, id) => {\n  console.log('delete page', id);\n  const response = await axios.delete(routes.deletePage(userId, id), {\n    withCredentials: true\n  });\n  console.log('deletePage response', response);\n  return response;\n};\n\nconst pagesService = {\n  createPage,\n  fetchPages,\n  viewPage,\n  downloadPage,\n  deletePage\n};\nexport default pagesService;","map":{"version":3,"sources":["/Users/gregpetropoulos/CodingBootcamp/Page-Builder-Project-3/frontend/src/services/pages.js"],"names":["axios","routes","createPage","name","thumbnail","html","page","post","withCredentials","err","console","log","fetchPages","id","response","get","data","viewPage","downloadPage","download","deletePage","userId","delete","pagesService"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,UAAvB;;AAEA,MAAMC,UAAU,GAAG,OAAOC,IAAP,EAAaC,SAAb,EAAwBC,IAAxB,KAAiC;AACnD,QAAMC,IAAI,GAAG;AACZH,IAAAA,IADY;AAEZC,IAAAA,SAFY;AAGZC,IAAAA;AAHY,GAAb;;AAKA,MAAI;AACH,UAAML,KAAK,CAACO,IAAN,CAAWN,MAAM,CAACC,UAAP,EAAX,EAAgCI,IAAhC,EAAsC;AAAEE,MAAAA,eAAe,EAAE;AAAnB,KAAtC,CAAN;AACA,GAFD,CAEE,OAAOC,GAAP,EAAY;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA;AACD,CAXD;;AAaA,MAAMG,UAAU,GAAG,MAAOC,EAAP,IAAc;AAChC,QAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAUd,MAAM,CAACW,UAAP,CAAkBC,EAAlB,CAAV,EAAiC;AAAEL,IAAAA,eAAe,EAAE;AAAnB,GAAjC,CAAvB;AACA,SAAOM,QAAQ,CAACE,IAAhB;AAEA,CAJD;;AAMA,MAAMC,QAAQ,GAAG,MAAMJ,EAAN,IAAY;AAC5BH,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBE,EAAlB;AACA,QAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAUd,MAAM,CAACgB,QAAP,CAAgBJ,EAAhB,CAAV,EAA+B;AAAEL,IAAAA,eAAe,EAAE;AAAnB,GAA/B,CAAvB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBG,QAAnB;AACA,SAAOA,QAAQ,CAACE,IAAhB;AACA,CALD;;AAOA,MAAME,YAAY,GAAG,MAAML,EAAN,IAAY;AAChCH,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BE,EAA/B;AACA,SAAO,MAAMb,KAAK,CAACe,GAAN,CAAUd,MAAM,CAACkB,QAAP,CAAgBN,EAAhB,CAAV,EAA+B;AAAEL,IAAAA,eAAe,EAAE;AAAnB,GAA/B,CAAb;AACA,CAHD;;AAKA,MAAMY,UAAU,GAAG,OAAOC,MAAP,EAAeR,EAAf,KAAsB;AACxCH,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BE,EAA3B;AACA,QAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACsB,MAAN,CAAarB,MAAM,CAACmB,UAAP,CAAkBC,MAAlB,EAA0BR,EAA1B,CAAb,EAA4C;AAAEL,IAAAA,eAAe,EAAE;AAAnB,GAA5C,CAAvB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCG,QAAnC;AACA,SAAOA,QAAP;AACA,CALD;;AAOA,MAAMS,YAAY,GAAG;AACpBrB,EAAAA,UADoB;AAEpBU,EAAAA,UAFoB;AAGpBK,EAAAA,QAHoB;AAIpBC,EAAAA,YAJoB;AAKpBE,EAAAA;AALoB,CAArB;AAQA,eAAeG,YAAf","sourcesContent":["import axios from 'axios';\r\nimport { routes } from './routes'\r\n\r\nconst createPage = async (name, thumbnail, html) => {\t\r\n\tconst page = {\r\n\t\tname,\r\n\t\tthumbnail,\r\n\t\thtml,\r\n\t};\r\n\ttry {\r\n\t\tawait axios.post(routes.createPage(), page, { withCredentials: true });\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t}\r\n};\r\n\r\nconst fetchPages = async (id) => {\r\n\tconst response = await axios.get(routes.fetchPages(id), { withCredentials: true });\r\n\treturn response.data;\r\n\t\r\n};\r\n\r\nconst viewPage = async id => {\r\n\tconsole.log('ID', id)\r\n\tconst response = await axios.get(routes.viewPage(id), { withCredentials: true });\r\n\tconsole.log('sss', response)\r\n\treturn response.data\r\n};\r\n\r\nconst downloadPage = async id => {\r\n\tconsole.log('downloadPage id', id)\r\n\treturn await axios.get(routes.download(id), { withCredentials: true });\r\n};\r\n\r\nconst deletePage = async (userId, id) => {\r\n\tconsole.log('delete page', id)\r\n\tconst response = await axios.delete(routes.deletePage(userId, id), { withCredentials: true })\r\n\tconsole.log('deletePage response', response)\r\n\treturn response\r\n}\r\n\r\nconst pagesService = {\r\n\tcreatePage,\r\n\tfetchPages,\r\n\tviewPage,\r\n\tdownloadPage,\r\n\tdeletePage\r\n};\r\n\r\nexport default pagesService;\r\n"]},"metadata":{},"sourceType":"module"}